{"version":3,"sources":["node_modules/browser-pack/_prelude.js","bundle.src.js","node_modules/card-validator/index.js","node_modules/card-validator/src/card-number.js","node_modules/card-validator/src/cvv.js","node_modules/card-validator/src/expiration-date.js","node_modules/card-validator/src/expiration-month.js","node_modules/card-validator/src/expiration-year.js","node_modules/card-validator/src/lib/is-array.js","node_modules/card-validator/src/luhn-10.js","node_modules/card-validator/src/parse-date.js","node_modules/card-validator/src/postal-code.js","node_modules/credit-card-type/index.js"],"names":["cardValidator","require","supportedBrand","brand","types","visa","mastercard","american-express","diners-club","discover","jcb","unionpay","maestro","elo","mir","module","exports","number","expirationDate","expirationMonth","expirationYear","cvv","postalCode","creditCardType","verification","card","isPotentiallyValid","isValid","cardNumber","value","options","potentialTypes","cardType","i","maxLength","String","replace","test","getCardTypes","length","type","UNIONPAY","luhnValidateUnionPay","luhn10","Math","max","apply","lengths","min","includes","array","thing","maximum","DEFAULT_LENGTH","Array","month","year","maxElapsedYear","date","monthValid","yearValid","isValidForThisYear","parseDate","isCurrentYear","result","currentMonth","Date","getMonth","parseInt","isNaN","currentFirstTwo","currentYear","firstTwo","len","twoDigitYear","valid","DEFAULT_VALID_NUMBER_OF_YEARS_IN_THE_FUTURE","getFullYear","slice","Number","substr","isArray","arg","Object","prototype","toString","call","identifier","num","sum","alt","charAt","split","join","minLength","DEFAULT_MIN_POSTAL_CODE_LENGTH","clone","originalObject","JSON","parse","stringify","findType","customCards","isValidInputType","hasEnoughResultsToDetermineBestMatch","results","numberOfResultsWithMaxStrengthProperty","filter","matchStrength","findBestMatch","reduce","bestMatch","getAllCardTypes","testOrder","map","forEach","cardConfiguration","loopOverCardPatterns","pattern","patternLength","clonedCardConfiguration","patterns","matches","push","matchesRange","matchesPattern","substring","maxLengthToCheck","integerRepresentationOfCardNumber","getCardPosition","name","ignoreErrorForNotExisting","position","indexOf","Error","VISA","MASTERCARD","AMERICAN_EXPRESS","DINERS_CLUB","DISCOVER","ELO","JCB","MAESTRO","MIR","CVV","CID","CVC","CVN","CVP2","CVE","ORIGINAL_TEST_ORDER","niceType","gaps","code","size","getTypeInfo","removeCard","splice","addCard","config","existingCardPosition","updateCard","updates","clonedCard","keys","key","changeOrder","currentPosition","resetModifications"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","cardValidator = require('card-validator');\n\ncardValidator.supportedBrand = function(brand) {\n\n  var types = {\n    visa: \"VISA\",\n    mastercard: \"MASTERCARD\",\n    \"american-express\": \"AMEX\",\n    \"diners-club\": \"DINERS\",\n    discover: \"DISCOVER\",\n    jcb: \"JCB\",\n    unionpay: \"\",\n    maestro: \"MAESTROCARD\",\n    elo: \"\",\n    mir: \"\"\n  };\n\n  if (typeof types[brand] != \"undefined\") {\n    return types[brand];\n  }\n\n  return \"\";\n\n};\n\n/*\ncreditCardType.types = {\n  VISA: VISA,\n  MASTERCARD: MASTERCARD,\n  AMERICAN_EXPRESS: AMERICAN_EXPRESS,\n  DINERS_CLUB: DINERS_CLUB,\n  DISCOVER: DISCOVER,\n  JCB: JCB,\n  UNIONPAY: UNIONPAY,\n  MAESTRO: MAESTRO,\n  ELO: ELO,\n  MIR: MIR\n};\n*/","'use strict';\n\nmodule.exports = {\n  number: require('./src/card-number'),\n  expirationDate: require('./src/expiration-date'),\n  expirationMonth: require('./src/expiration-month'),\n  expirationYear: require('./src/expiration-year'),\n  cvv: require('./src/cvv'),\n  postalCode: require('./src/postal-code'),\n  creditCardType: require('credit-card-type')\n};\n","'use strict';\n\nvar luhn10 = require('./luhn-10');\nvar getCardTypes = require('credit-card-type');\n\nfunction verification(card, isPotentiallyValid, isValid) {\n  return {card: card, isPotentiallyValid: isPotentiallyValid, isValid: isValid};\n}\n\nfunction cardNumber(value, options) {\n  var potentialTypes, cardType, isPotentiallyValid, isValid, i, maxLength;\n\n  options = options || {};\n\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n\n  if (typeof value !== 'string') { return verification(null, false, false); }\n\n  value = value.replace(/\\-|\\s/g, '');\n\n  if (!/^\\d*$/.test(value)) { return verification(null, false, false); }\n\n  potentialTypes = getCardTypes(value);\n\n  if (potentialTypes.length === 0) {\n    return verification(null, false, false);\n  } else if (potentialTypes.length !== 1) {\n    return verification(null, true, false);\n  }\n\n  cardType = potentialTypes[0];\n\n  if (options.maxLength && value.length > options.maxLength) {\n    return verification(cardType, false, false);\n  }\n\n  if (cardType.type === getCardTypes.types.UNIONPAY && options.luhnValidateUnionPay !== true) {\n    isValid = true;\n  } else {\n    isValid = luhn10(value);\n  }\n\n  maxLength = Math.max.apply(null, cardType.lengths);\n  if (options.maxLength) {\n    maxLength = Math.min(options.maxLength, maxLength);\n  }\n\n  for (i = 0; i < cardType.lengths.length; i++) {\n    if (cardType.lengths[i] === value.length) {\n      isPotentiallyValid = value.length < maxLength || isValid;\n      return verification(cardType, isPotentiallyValid, isValid);\n    }\n  }\n\n  return verification(cardType, value.length < maxLength, false);\n}\n\nmodule.exports = cardNumber;\n","'use strict';\n\nvar DEFAULT_LENGTH = 3;\n\nfunction includes(array, thing) {\n  var i = 0;\n\n  for (; i < array.length; i++) {\n    if (thing === array[i]) { return true; }\n  }\n\n  return false;\n}\n\nfunction max(array) {\n  var maximum = DEFAULT_LENGTH;\n  var i = 0;\n\n  for (; i < array.length; i++) {\n    maximum = array[i] > maximum ? array[i] : maximum;\n  }\n\n  return maximum;\n}\n\nfunction verification(isValid, isPotentiallyValid) {\n  return {isValid: isValid, isPotentiallyValid: isPotentiallyValid};\n}\n\nfunction cvv(value, maxLength) {\n  maxLength = maxLength || DEFAULT_LENGTH;\n  maxLength = maxLength instanceof Array ? maxLength : [maxLength];\n\n  if (typeof value !== 'string') { return verification(false, false); }\n  if (!/^\\d*$/.test(value)) { return verification(false, false); }\n  if (includes(maxLength, value.length)) { return verification(true, true); }\n  if (value.length < Math.min.apply(null, maxLength)) { return verification(false, true); }\n  if (value.length > max(maxLength)) { return verification(false, false); }\n\n  return verification(true, true);\n}\n\nmodule.exports = cvv;\n","'use strict';\n\nvar parseDate = require('./parse-date');\nvar expirationMonth = require('./expiration-month');\nvar expirationYear = require('./expiration-year');\n\nfunction verification(isValid, isPotentiallyValid, month, year) {\n  return {\n    isValid: isValid,\n    isPotentiallyValid: isPotentiallyValid,\n    month: month,\n    year: year\n  };\n}\n\nfunction expirationDate(value, maxElapsedYear) {\n  var date, monthValid, yearValid, isValidForThisYear;\n\n  if (typeof value === 'string') {\n    value = value.replace(/^(\\d\\d) (\\d\\d(\\d\\d)?)$/, '$1/$2');\n    date = parseDate(value);\n  } else if (value !== null && typeof value === 'object') {\n    date = {\n      month: String(value.month),\n      year: String(value.year)\n    };\n  } else {\n    return verification(false, false, null, null);\n  }\n\n  monthValid = expirationMonth(date.month);\n  yearValid = expirationYear(date.year, maxElapsedYear);\n\n  if (monthValid.isValid) {\n    if (yearValid.isCurrentYear) {\n      isValidForThisYear = monthValid.isValidForThisYear;\n      return verification(isValidForThisYear, isValidForThisYear, date.month, date.year);\n    }\n\n    if (yearValid.isValid) {\n      return verification(true, true, date.month, date.year);\n    }\n  }\n\n  if (monthValid.isPotentiallyValid && yearValid.isPotentiallyValid) {\n    return verification(false, true, null, null);\n  }\n\n  return verification(false, false, null, null);\n}\n\nmodule.exports = expirationDate;\n","'use strict';\n\nfunction verification(isValid, isPotentiallyValid, isValidForThisYear) {\n  return {\n    isValid: isValid,\n    isPotentiallyValid: isPotentiallyValid,\n    isValidForThisYear: isValidForThisYear || false\n  };\n}\n\nfunction expirationMonth(value) {\n  var month, result;\n  var currentMonth = new Date().getMonth() + 1;\n\n  if (typeof value !== 'string') {\n    return verification(false, false);\n  }\n  if (value.replace(/\\s/g, '') === '' || value === '0') {\n    return verification(false, true);\n  }\n  if (!/^\\d*$/.test(value)) {\n    return verification(false, false);\n  }\n\n  month = parseInt(value, 10);\n\n  if (isNaN(value)) {\n    return verification(false, false);\n  }\n\n  result = month > 0 && month < 13;\n\n  return verification(result, result, result && month >= currentMonth);\n}\n\nmodule.exports = expirationMonth;\n","'use strict';\n\nvar DEFAULT_VALID_NUMBER_OF_YEARS_IN_THE_FUTURE = 19;\n\nfunction verification(isValid, isPotentiallyValid, isCurrentYear) {\n  return {\n    isValid: isValid,\n    isPotentiallyValid: isPotentiallyValid,\n    isCurrentYear: isCurrentYear || false\n  };\n}\n\nfunction expirationYear(value, maxElapsedYear) {\n  var currentFirstTwo, currentYear, firstTwo, len, twoDigitYear, valid, isCurrentYear;\n\n  maxElapsedYear = maxElapsedYear || DEFAULT_VALID_NUMBER_OF_YEARS_IN_THE_FUTURE;\n\n  if (typeof value !== 'string') {\n    return verification(false, false);\n  }\n  if (value.replace(/\\s/g, '') === '') {\n    return verification(false, true);\n  }\n  if (!/^\\d*$/.test(value)) {\n    return verification(false, false);\n  }\n\n  len = value.length;\n\n  if (len < 2) {\n    return verification(false, true);\n  }\n\n  currentYear = new Date().getFullYear();\n\n  if (len === 3) {\n    // 20x === 20x\n    firstTwo = value.slice(0, 2);\n    currentFirstTwo = String(currentYear).slice(0, 2);\n    return verification(false, firstTwo === currentFirstTwo);\n  }\n\n  if (len > 4) {\n    return verification(false, false);\n  }\n\n  value = parseInt(value, 10);\n  twoDigitYear = Number(String(currentYear).substr(2, 2));\n\n  if (len === 2) {\n    isCurrentYear = twoDigitYear === value;\n    valid = value >= twoDigitYear && value <= twoDigitYear + maxElapsedYear;\n  } else if (len === 4) {\n    isCurrentYear = currentYear === value;\n    valid = value >= currentYear && value <= currentYear + maxElapsedYear;\n  }\n\n  return verification(valid, valid, isCurrentYear);\n}\n\nmodule.exports = expirationYear;\n","'use strict';\n\n// Polyfill taken from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray#Polyfill>.\n\nmodule.exports = Array.isArray || function (arg) {\n  return Object.prototype.toString.call(arg) === '[object Array]';\n};\n","/*\n * Luhn algorithm implementation in JavaScript\n * Copyright (c) 2009 Nicholas C. Zakas\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n'use strict';\n\nfunction luhn10(identifier) {\n  var sum = 0;\n  var alt = false;\n  var i = identifier.length - 1;\n  var num;\n\n  while (i >= 0) {\n    num = parseInt(identifier.charAt(i), 10);\n\n    if (alt) {\n      num *= 2;\n      if (num > 9) {\n        num = (num % 10) + 1; // eslint-disable-line no-extra-parens\n      }\n    }\n\n    alt = !alt;\n\n    sum += num;\n\n    i--;\n  }\n\n  return sum % 10 === 0;\n}\n\nmodule.exports = luhn10;\n","'use strict';\n\nvar expirationYear = require('./expiration-year');\nvar isArray = require('./lib/is-array');\n\nfunction parseDate(value) {\n  var month, len, year, yearValid;\n\n  if (/\\//.test(value)) {\n    value = value.split(/\\s*\\/\\s*/g);\n  } else if (/\\s/.test(value)) {\n    value = value.split(/ +/g);\n  }\n\n  if (isArray(value)) {\n    return {\n      month: value[0],\n      year: value.slice(1).join()\n    };\n  }\n\n  len = value[0] === '0' || value.length > 5 ? 2 : 1;\n\n  if (value[0] === '1') {\n    year = value.substr(1);\n    yearValid = expirationYear(year);\n    if (!yearValid.isPotentiallyValid) {\n      len = 2;\n    }\n  }\n\n  month = value.substr(0, len);\n\n  return {\n    month: month,\n    year: value.substr(month.length)\n  };\n}\n\nmodule.exports = parseDate;\n","'use strict';\n\nvar DEFAULT_MIN_POSTAL_CODE_LENGTH = 3;\n\nfunction verification(isValid, isPotentiallyValid) {\n  return {isValid: isValid, isPotentiallyValid: isPotentiallyValid};\n}\n\nfunction postalCode(value, options) {\n  var minLength;\n\n  options = options || {};\n\n  minLength = options.minLength || DEFAULT_MIN_POSTAL_CODE_LENGTH;\n\n  if (typeof value !== 'string') {\n    return verification(false, false);\n  } else if (value.length < minLength) {\n    return verification(false, true);\n  }\n\n  return verification(true, true);\n}\n\nmodule.exports = postalCode;\n","'use strict';\n\nvar testOrder;\nvar types = {};\nvar customCards = {};\nvar VISA = 'visa';\nvar MASTERCARD = 'mastercard';\nvar AMERICAN_EXPRESS = 'american-express';\nvar DINERS_CLUB = 'diners-club';\nvar DISCOVER = 'discover';\nvar ELO = 'elo';\nvar JCB = 'jcb';\nvar UNIONPAY = 'unionpay';\nvar MAESTRO = 'maestro';\nvar MIR = 'mir';\nvar CVV = 'CVV';\nvar CID = 'CID';\nvar CVC = 'CVC';\nvar CVN = 'CVN';\nvar CVP2 = 'CVP2';\nvar CVE = 'CVE';\nvar ORIGINAL_TEST_ORDER = [\n  VISA,\n  MASTERCARD,\n  AMERICAN_EXPRESS,\n  DINERS_CLUB,\n  DISCOVER,\n  JCB,\n  UNIONPAY,\n  MAESTRO,\n  ELO,\n  MIR\n];\n\nfunction clone(originalObject) {\n  var dupe;\n\n  if (!originalObject) { return null; }\n\n  dupe = JSON.parse(JSON.stringify(originalObject));\n\n  return dupe;\n}\n\ntestOrder = clone(ORIGINAL_TEST_ORDER);\n\ntypes[VISA] = {\n  niceType: 'Visa',\n  type: VISA,\n  patterns: [\n    4\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16, 18, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\n\ntypes[MASTERCARD] = {\n  niceType: 'Mastercard',\n  type: MASTERCARD,\n  patterns: [\n    [51, 55],\n    [2221, 2229],\n    [223, 229],\n    [23, 26],\n    [270, 271],\n    2720\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16],\n  code: {\n    name: CVC,\n    size: 3\n  }\n};\n\ntypes[AMERICAN_EXPRESS] = {\n  niceType: 'American Express',\n  type: AMERICAN_EXPRESS,\n  patterns: [\n    34,\n    37\n  ],\n  gaps: [4, 10],\n  lengths: [15],\n  code: {\n    name: CID,\n    size: 4\n  }\n};\n\ntypes[DINERS_CLUB] = {\n  niceType: 'Diners Club',\n  type: DINERS_CLUB,\n  patterns: [\n    [300, 305],\n    36,\n    38,\n    39\n  ],\n  gaps: [4, 10],\n  lengths: [14, 16, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\n\ntypes[DISCOVER] = {\n  niceType: 'Discover',\n  type: DISCOVER,\n  patterns: [\n    6011,\n    [644, 649],\n    65\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16, 19],\n  code: {\n    name: CID,\n    size: 3\n  }\n};\n\ntypes[JCB] = {\n  niceType: 'JCB',\n  type: JCB,\n  patterns: [\n    2131,\n    1800,\n    [3528, 3589]\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\n\ntypes[UNIONPAY] = {\n  niceType: 'UnionPay',\n  type: UNIONPAY,\n  patterns: [\n    620,\n    [624, 626],\n    [62100, 62182],\n    [62184, 62187],\n    [62185, 62197],\n    [62200, 62205],\n    [622010, 622999],\n    622018,\n    [622019, 622999],\n    [62207, 62209],\n    [622126, 622925],\n    [623, 626],\n    6270,\n    6272,\n    6276,\n    [627700, 627779],\n    [627781, 627799],\n    [6282, 6289],\n    6291,\n    6292\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVN,\n    size: 3\n  }\n};\n\ntypes[MAESTRO] = {\n  niceType: 'Maestro',\n  type: MAESTRO,\n  patterns: [\n    493698,\n    [500000, 506698],\n    [506779, 508999],\n    [56, 59],\n    63,\n    67,\n    6\n  ],\n  gaps: [4, 8, 12],\n  lengths: [12, 13, 14, 15, 16, 17, 18, 19],\n  code: {\n    name: CVC,\n    size: 3\n  }\n};\n\ntypes[ELO] = {\n  niceType: 'Elo',\n  type: ELO,\n  patterns: [\n    401178,\n    401179,\n    438935,\n    457631,\n    457632,\n    431274,\n    451416,\n    457393,\n    504175,\n    [506699, 506778],\n    [509000, 509999],\n    627780,\n    636297,\n    636368,\n    [650031, 650033],\n    [650035, 650051],\n    [650405, 650439],\n    [650485, 650538],\n    [650541, 650598],\n    [650700, 650718],\n    [650720, 650727],\n    [650901, 650978],\n    [651652, 651679],\n    [655000, 655019],\n    [655021, 655058]\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16],\n  code: {\n    name: CVE,\n    size: 3\n  }\n};\n\ntypes[MIR] = {\n  niceType: 'Mir',\n  type: MIR,\n  patterns: [\n    [2200, 2204]\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVP2,\n    size: 3\n  }\n};\n\nfunction findType(type) {\n  return customCards[type] || types[type];\n}\n\nfunction isValidInputType(cardNumber) {\n  return typeof cardNumber === 'string' || cardNumber instanceof String;\n}\n\nfunction hasEnoughResultsToDetermineBestMatch(results) {\n  var numberOfResultsWithMaxStrengthProperty = results.filter(function (result) {\n    return result.matchStrength;\n  }).length;\n\n  // if all possible results have a maxStrength property\n  // that means the card number is sufficiently long\n  // enough to determine conclusively what the type is\n  return numberOfResultsWithMaxStrengthProperty > 0 &&\n    numberOfResultsWithMaxStrengthProperty === results.length;\n}\n\nfunction findBestMatch(results) {\n  if (!hasEnoughResultsToDetermineBestMatch(results)) {\n    return;\n  }\n\n  return results.reduce(function (bestMatch, result) { // eslint-disable-line consistent-return\n    if (!bestMatch) {\n      return result;\n    }\n\n    // if the current best match pattern is less specific\n    // than this result, set the result as the new best match\n    if (bestMatch.matchStrength < result.matchStrength) {\n      return result;\n    }\n\n    return bestMatch;\n  });\n}\n\nfunction getAllCardTypes() {\n  return testOrder.map(function (type) {\n    return clone(findType(type));\n  });\n}\n\nfunction creditCardType(cardNumber) {\n  var bestMatch;\n  var results = [];\n\n  if (!isValidInputType(cardNumber)) {\n    return [];\n  }\n\n  if (cardNumber.length === 0) {\n    return getAllCardTypes();\n  }\n\n  testOrder.forEach(function (type) {\n    var cardConfiguration = findType(type);\n\n    loopOverCardPatterns(cardNumber, cardConfiguration, results);\n  });\n\n  bestMatch = findBestMatch(results);\n\n  if (bestMatch) {\n    return [bestMatch];\n  }\n\n  return results;\n}\n\nfunction loopOverCardPatterns(cardNumber, cardConfiguration, results) {\n  var i, pattern, patternLength, clonedCardConfiguration;\n\n  for (i = 0; i < cardConfiguration.patterns.length; i++) {\n    pattern = cardConfiguration.patterns[i];\n\n    if (!matches(cardNumber, pattern)) {\n      continue;\n    }\n\n    clonedCardConfiguration = clone(cardConfiguration);\n\n    if (Array.isArray(pattern)) {\n      patternLength = String(pattern[0]).length;\n    } else {\n      patternLength = String(pattern).length;\n    }\n\n    if (cardNumber.length >= patternLength) {\n      clonedCardConfiguration.matchStrength = patternLength;\n    }\n\n    results.push(clonedCardConfiguration);\n    break;\n  }\n}\n\nfunction matches(cardNumber, pattern) {\n  if (Array.isArray(pattern)) {\n    return matchesRange(cardNumber, pattern[0], pattern[1]);\n  }\n\n  return matchesPattern(cardNumber, pattern);\n}\n\nfunction matchesPattern(cardNumber, pattern) {\n  pattern = String(pattern);\n\n  return pattern.substring(0, cardNumber.length) === cardNumber.substring(0, pattern.length);\n}\n\n// Adapted from https://github.com/polvo-labs/card-type/blob/aaab11f80fa1939bccc8f24905a06ae3cd864356/src/cardType.js#L37-L42\nfunction matchesRange(cardNumber, min, max) {\n  var maxLengthToCheck = String(min).length;\n  var substr = cardNumber.substr(0, maxLengthToCheck);\n  var integerRepresentationOfCardNumber = parseInt(substr, 10);\n\n  min = parseInt(String(min).substr(0, substr.length), 10);\n  max = parseInt(String(max).substr(0, substr.length), 10);\n\n  return integerRepresentationOfCardNumber >= min && integerRepresentationOfCardNumber <= max;\n}\n\ncreditCardType.getTypeInfo = function (type) {\n  return clone(findType(type));\n};\n\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  var position = testOrder.indexOf(name);\n\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n\n  return position;\n}\n\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n\n  testOrder.splice(position, 1);\n};\n\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n\n  customCards[config.type] = config;\n\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\n\ncreditCardType.updateCard = function (cardType, updates) {\n  var clonedCard;\n  var originalObject = customCards[cardType] || types[cardType];\n\n  if (!originalObject) {\n    throw new Error('\"' + cardType + '\" is not a recognized type. Use `addCard` instead.');\n  }\n\n  if (updates.type && originalObject.type !== updates.type) {\n    throw new Error('Cannot overwrite type parameter.');\n  }\n\n  clonedCard = clone(originalObject, true);\n\n  Object.keys(clonedCard).forEach(function (key) {\n    if (updates[key]) {\n      clonedCard[key] = updates[key];\n    }\n  });\n\n  customCards[clonedCard.type] = clonedCard;\n};\n\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\n\ncreditCardType.resetModifications = function () {\n  testOrder = clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\n\ncreditCardType.types = {\n  VISA: VISA,\n  MASTERCARD: MASTERCARD,\n  AMERICAN_EXPRESS: AMERICAN_EXPRESS,\n  DINERS_CLUB: DINERS_CLUB,\n  DISCOVER: DISCOVER,\n  JCB: JCB,\n  UNIONPAY: UNIONPAY,\n  MAESTRO: MAESTRO,\n  ELO: ELO,\n  MIR: MIR\n};\n\nmodule.exports = creditCardType;\n"]}